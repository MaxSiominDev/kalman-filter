"""
Фрагмент 2: Настройка фильтра
Задача: отслеживание объекта, движущегося с постоянной скоростью
"""

import numpy as np
from fragment_1 import KalmanFilter1D

# ============================================
# Временной шаг
# ============================================

dt = 1.0  # секунда между измерениями

# ============================================
# Матрица F: как меняется состояние
# ============================================
# Состояние = [позиция, скорость]
#
# За время dt:
# новая_позиция = старая_позиция + скорость * dt
# новая_скорость = старая_скорость (предполагаем постоянную скорость)
#
# В матричном виде:
# [x]   [1  dt] [x_prev]
# [v] = [0   1] [v_prev]

F = np.array([[1.0, dt],
              [0.0, 1.0]])

print("Матрица F (динамика с постоянной скоростью):")
print(F)
print()

# ============================================
# Матрица H: что мы измеряем
# ============================================
# Датчик выдает только позицию, скорость не измеряем
# измерение = [1  0] * [позиция, скорость] = позиция

H = np.array([[1.0, 0.0]])

print("Матрица H (видим только позицию):")
print(H)
print()

# ============================================
# Матрица Q: шум модели
# ============================================
# Насколько модель точна?
# - Маленькая Q: модель почти идеальна
# - Большая Q: в реальности много непредсказуемых факторов

Q = np.array([[0.001, 0.0],
              [0.0, 0.001]])

print("Матрица Q (шум динамики):")
print(Q)
print("→ малые значения, считаем модель довольно точной")
print()

# ============================================
# Матрица R: шум измерений
# ============================================
# Насколько точен датчик?
# - Маленькая R: почти идеальные измерения
# - Большая R: датчик сильно врет

R = np.array([[0.05]])

print("Матрица R (шум датчика):")
print(R)
print("→ средний уровень, датчик неплох, но не идеален")
print()

# ============================================
# x0: начальная оценка состояния
# ============================================
# Стартуем с предположения: объект в нуле, движется со скоростью 1 м/с

x0 = np.array([[0.0],   # позиция
               [1.0]])  # скорость

print("Начальное состояние x0:")
print(f"  позиция: {x0[0, 0]} м")
print(f"  скорость: {x0[1, 0]} м/с")
print()

# ============================================
# P0: начальная неопределенность
# ============================================
# Насколько мы уверены в начальной оценке?
# Единичная матрица → средняя неопределенность

P0 = np.eye(2) * 1.0

print("Начальная ковариация P0:")
print(P0)
print("→ умеренная неуверенность в начальных значениях")
print()

# ============================================
# Запускаем фильтр
# ============================================

kf = KalmanFilter1D(F, H, Q, R, x0, P0)

print("=" * 50)
print("✓ Фильтр готов к работе")
print("=" * 50)
print()
print("Конфигурация:")
print(f"  • Размер состояния: {kf.n} (позиция + скорость)")
print(f"  • Размер измерений: {kf.m} (только позиция)")
print(f"  • Интервал: {dt} сек")
print(f"  • Модель: равномерное движение")
print(f"  • Датчик: позиционный")
